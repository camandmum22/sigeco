/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sigeco.ejb.subsistemas;

import com.sigeco.ejb.entities.Usuario;
import com.sigeco.ejb.sessionbean.TarifaFacade;
import com.sigeco.ejb.sessionbean.UsuarioFacade;
import com.sigeco.ejb.utilities.CipherAlgorithms;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.Stateful;

/**
 * <p>
 * @author csacanam
 */
@Stateful
public class UsuarioSB
{

    @EJB
    private UsuarioFacade usuarioFacade;

    @EJB
    private TarifaFacade tarifaFacade;

    public UsuarioFacade getUsuarioFacade()
    {
        return usuarioFacade;
    }

    public void setUsuarioFacade(UsuarioFacade usuarioFacade)
    {
        this.usuarioFacade = usuarioFacade;
    }

    public TarifaFacade getTarifaFacade()
    {
        return tarifaFacade;
    }

    public void setTarifaFacade(TarifaFacade tarifaFacade)
    {
        this.tarifaFacade = tarifaFacade;
    }

    /**
     * Valida si la contraseña del usuario indentificado con el documento es la
     * registrada en el sistema
     * <p>
     * @param documento El documento del usuario
     * @param contrasenia La contrasenia que se quiere validar
     * @return El usuario o null si no es valida o el usuario no existe
     */
    public Usuario isValidPassword(String documento, String contrasenia) throws Exception
    {
//        Query query = usuarioFacade.getEntityManager().createNamedQuery("Usuario.findByDocumento", Usuario.class).setParameter("documento", documento);
//        List<Usuario> lista = query.getResultList();
        
        List<Usuario> lista = usuarioFacade.findBy( "Documento", documento);
        
        if (!lista.isEmpty())
        {
            Usuario usuario = lista.get(0);

            if (CipherAlgorithms.decryptAES(usuario.getContraseña()).equals(contrasenia))
            {
                return usuario;
            }
        }

        return null;
    }
    
    /**
     * Devuleve el objeto Usuario asociado a un documento, si no existe
     * ningun usuario asociado a ese documento devulve null
     * <p>
     * @param documento El documento del usuario
     * @return El usuario o null si no es valida o el usuario no existe
     */
    //No estoy seguro si uso bien el findBy en la forma 2
    public Usuario darUsuarioConDocumento(String documento){
        Usuario u = null;
        if(documento!= null && !documento.trim().equals("")){
            //---Forma 1---
            List<Usuario> usus = usuarioFacade.findAll();
            for (int i = 0; i < usus.size(); i++) {
                if(usus.get(i)!=null && usus.get(i).getDocumento().equals(documento))
                    u = usus.get(i);
            }
            //---Forma 2---
            /*
            List<Usuario> usus2 = usuarioFacade.findBy("documento", documento);
            if(!usus2.isEmpty() && usus2.get(0)!=null)
                    u = usus.get(0);
            */
        }
        return u;
    }
}
