/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sigeco.namedbeans;

import com.sigeco.ejb.entities.GrupoInvestigacion;
import com.sigeco.ejb.entities.GrupoLinea;
import com.sigeco.ejb.entities.Investigador;
import com.sigeco.ejb.entities.LineaInvestigacion;
import com.sigeco.ejb.entities.Modalidad;
import com.sigeco.ejb.entities.ProyectoInvestigacion;
import com.sigeco.ejb.entities.RolProyecto;
import com.sigeco.ejb.entities.TipoInvestigacion;

import com.sigeco.ejb.entities.TipoProyecto;
import com.sigeco.ejb.exceptions.ProyectoException;
import com.sigeco.ejb.subsistemas.GrupoInvestigacionSB;
import com.sigeco.ejb.subsistemas.ProyectosSB;
import com.sigeco.utilities.InvestigadorEquipo;
import com.sigeco.utilities.Mensajes;
import java.awt.event.ActionEvent;
import java.io.File;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.RequestScoped;
import org.primefaces.model.UploadedFile;

/**
 *
 * @author csacanam
 */
@ManagedBean
@RequestScoped
public class ProyectosNB {

    //Atributos de un proyectoNuevo
    private GrupoInvestigacion grupoInvestigacion;
    private LineaInvestigacion lineaInvestigacion;
    private boolean aprobacionEtica;
    private UploadedFile aprobacionEticaDoc;
    private ProyectoInvestigacion proyectoNuevo;

    //Creación de equipo de investigación
    private List<InvestigadorEquipo> equipoInvestigadores;
    private Investigador investigadorEquipo;
    private RolProyecto rolInvestigador;
    private Modalidad modalidadInvestigador;
    
    //Atributos para editar un proyecto
    private ProyectoInvestigacion proyecto;
    private int codigoProyecto;

    //Lista de entidades
    private List<Investigador> investigadores;
    private List<Modalidad> modalidadesInvestigadores;
    private List<RolProyecto> rolesProyecto;
    private List<GrupoInvestigacion> gruposInvestigacion;
    private List<ProyectoInvestigacion> proyectosInvestigacion;

    private List<TipoProyecto> tiposProyecto;
    private List<LineaInvestigacion> lineasInvestigacion;
    private List<TipoInvestigacion> tiposInvestigacion;

    private boolean aprobadoComite;
    private Long presupuestoEsperado;

    //Session bean
    @EJB
    GrupoInvestigacionSB grupoInvestigacionSB;

    @EJB
    ProyectosSB proyectoSB;

    @ManagedProperty(value = "#{authAutNB}")
    AuthAutNB authAutNB;

    /**
     * Creates a new instance of ProyectosNB
     */
    public ProyectosNB() {

    }

    @PostConstruct
    public void init()
    {
        modalidadesInvestigadores = proyectoSB.getModalidadFacade().findAll();
        rolesProyecto = proyectoSB.getRolProyectoFacade().findAll();
        investigadores = proyectoSB.getInvestigadoresFacade().findAll();
        gruposInvestigacion = grupoInvestigacionSB.getGrupoInvestigacionFacade().findAll();
        proyectosInvestigacion = proyectoSB.getProyectoFacade().findAll();
        tiposProyecto = proyectoSB.getTipoProyectoFacade().findAll();
        lineasInvestigacion = proyectoSB.getLineaInvestigacionFacade().findAll();
        tiposInvestigacion = proyectoSB.getTipoInvestigacionFacade().findAll();
        proyecto = new ProyectoInvestigacion();
        proyectoNuevo = new ProyectoInvestigacion();
        equipoInvestigadores = new ArrayList<>();
        equipoInvestigadores.add(new InvestigadorEquipo(investigadores.get(0).getUsuario(), investigadores.get(0).getGrupoInvestigacion(), rolesProyecto.get(0), modalidadesInvestigadores.get(0)));


    }

    /**
     * Permite crear un proyectoNuevo de investigación
     */
    public void crearProyecto() {

        //Poner aprobación ética
        if (aprobacionEtica) {
            proyectoNuevo.setAprobacionEtica("Y");
        } else {
            proyectoNuevo.setAprobacionEtica("N");
        }

        //Agregar documento de aprobación de ética
        if (aprobacionEticaDoc != null) {
            File archivo = new File(aprobacionEticaDoc.getFileName());

            if (archivo.isFile())
            {
                proyectoNuevo.setDocEtica(archivo);
            } else {
                proyectoNuevo.setDocEtica(null);
            }
        } else {
            proyectoNuevo.setDocEtica(null);
        }

        //Agregar prespuesto esperado
        proyectoNuevo.setPresupuestoEsperado(presupuestoEsperado+"");
        
        
        //Agregar grupo línea
        if(grupoInvestigacion!= null && lineaInvestigacion!=null){
            GrupoLinea gl = new GrupoLinea(grupoInvestigacion.getCodigo(), lineaInvestigacion.getCodigo());
            proyectoNuevo.setGrupoLinea(gl);
        }else{
            proyectoNuevo.setGrupoLinea(null);
        }
        
        //Agregar grupo linea
        /*if (grupoInvestigacion != null && lineaInvestigacion != null) {
            GrupoLineaPK grupoLineaPK = new GrupoLineaPK(grupoInvestigacion.getCodigo(), lineaInvestigacion.getCodigo());
            GrupoLinea gLinea = new GrupoLinea(grupoLineaPK);
            gLinea.setGrupoInvestigacion(grupoInvestigacion);
            gLinea.setLineaInvestigacion(lineaInvestigacion);
            proyectoNuevo.setGrupoLinea(gLinea);
        } else {
            proyectoNuevo.setGrupoLinea(null);
        }*/

        //Crear proyecto de investigación
        try {
            proyectoSB.crearProyecto(proyectoNuevo, authAutNB.getUsuarioActual());
            proyectosInvestigacion.add(proyectoNuevo);
            Mensajes.mostrarMensaje(FacesMessage.SEVERITY_INFO, "Se creó el proyecto de investigación", "Se creó el proyecto de investigación");
        } catch (ProyectoException ex) {
            Mensajes.mostrarMensaje(FacesMessage.SEVERITY_INFO, "¡Hubo problemas!", ex.getMessage());
        }

    }

    /**
     * Permite editar un proyectoNuevo de Investigación
     */
    public void editarProyecto() {
        //Poner aprobación ética
        if (aprobacionEtica) {
            proyectoNuevo.setAprobacionEtica("Y");
        } else {
            proyectoNuevo.setAprobacionEtica("N");
        }

        //Agregar documento de aprobación de ética
        if (aprobacionEticaDoc != null) {
            File archivo = new File(aprobacionEticaDoc.getFileName());

            if (archivo.isFile())
            {
                proyectoNuevo.setDocEtica(archivo);
            } else {
                proyectoNuevo.setDocEtica(null);
            }
        } else {
            proyectoNuevo.setDocEtica(null);
        }

        try
        {

            proyectoSB.editarProyecto(proyecto.getCodigo(), proyecto.getTitulo(), proyecto.getResumenEjecutivo(), proyecto.getFechainicio(), proyecto.getFechafin(),
                    new BigDecimal(proyecto.getPresupuestoEsperado()), proyecto.getAprobacionEtica());
            Mensajes.mostrarMensaje(FacesMessage.SEVERITY_INFO, "Se editó el proyecto de investigación", proyecto.toString());

        } catch (ProyectoException ex) {
            Mensajes.mostrarMensaje(FacesMessage.SEVERITY_ERROR, "No se pudo editar", "No se pudo editar");
        }
    }

    /**
     * Permite Mostrar todos los proyectos de un Investigador que es líder
     * investigador en un grupo de investigación.
     *
     * @param documento Es el documento del Usuario
     * @return proyectosInvestigador
     */
    public List<ProyectoInvestigacion> darProyectosInvestigadorEnGrupoInvestigacion(String documento)
    {

        List<ProyectoInvestigacion> proyectosInvestigador = new ArrayList();
        for (int i = 0; i > investigadores.size(); i++)
        {
            Investigador inv = investigadores.get(i);
            if (inv.getUsuario().getDocumento().equals(documento))
            {
                if (inv.getEslider().equals("S"))
                {
                    GrupoInvestigacion grupInv = inv.getGrupoInvestigacion();
                    proyectosInvestigador = proyectoSB.darProyectosDeGrupoDeInvestigacion(grupInv);

                } else
                {

                    Mensajes.mostrarMensaje(FacesMessage.SEVERITY_ERROR, "No hay proyectos para ese líder", "No existe ese líder");
                }
            }
        }

        return proyectosInvestigador;

    }

    public void evaluarProyectoPorComiteInvestigacion(Long codPro, boolean aprobado, String observaciones) {
        proyectoSB.evaluarProyectoPorComiteInvestigacion(codPro, aprobado, observaciones);
    }

    public List<ProyectoInvestigacion> darProyectosAprobadosDecano() {
        return proyectoSB.darProyectosAprobadosDecano();
    }

    /**
     * Permite dar los proyectos de un líder de proyecto en una convocatoria
     * pasada
     *
     * @param codLider es el código del Líder de proyecto
     * @param codConv es el código de la convocatoria
     * @return proyectos
     */
    public List<ProyectoInvestigacion> proyectosConvPasadaLider(Long codLider, Long codConv)
    {
        return proyectoSB.proyectosConvPasadaLider(codLider, codConv);
    }

    /**
     * Obtiene un proyecto de acuerdo a un código de proyecto dado
     *
     * @param codigoProyecto - Código de la fase a ser buscada
     */
    public void read(Long codigoProyecto)
    {
        setProyecto(proyectoSB.getProyectoFacade().find(codigoProyecto));
    }

    public void agregarInvestigadorAEquipo(ActionEvent actionEvent){
       equipoInvestigadores.add(new InvestigadorEquipo(investigadorEquipo.getUsuario(),investigadorEquipo.getGrupoInvestigacion(),rolInvestigador,new Modalidad()));
        setInvestigadorEquipo(null);
        setRolInvestigador(null);
        setModalidadInvestigador(null);
    
    }

    /**
     * Método que se invoca cuando se desea filtrar las líneas de investigación por cada grupo de investigación
     */
    public void onGroupsChange()
    {
        if (grupoInvestigacion != null)
        {
            lineasInvestigacion = proyectoSB.buscarLineasPorGrupo(grupoInvestigacion);
        }

    }

    //Getter y setters
    public boolean isAprobadoComite() {
        return aprobadoComite;
    }

    public void setAprobadoComite(boolean aprobadoComite) {
        this.aprobadoComite = aprobadoComite;
    }

    public boolean isAprobacionEtica() {
        return aprobacionEtica;
    }

    public UploadedFile getAprobacionEticaDoc() {
        return aprobacionEticaDoc;
    }

    public GrupoInvestigacion getGrupoInvestigacion() {
        return grupoInvestigacion;
    }

    public List<GrupoInvestigacion> getGruposInvestigacion() {
        return gruposInvestigacion;
    }

    public List<ProyectoInvestigacion> getProyectosInvestigacion() {
        return proyectosInvestigacion;
    }

    public void setAprobacionEtica(boolean aprobacionEtica) {
        this.aprobacionEtica = aprobacionEtica;
    }

    public LineaInvestigacion getLineaInvestigacion() {
        return lineaInvestigacion;
    }

    public List<TipoProyecto> getTiposProyecto() {
        return tiposProyecto;
    }

    public List<LineaInvestigacion> getLineasInvestigacion() {
        return lineasInvestigacion;
    }

    public List<TipoInvestigacion> getTiposInvestigacion() {
        return tiposInvestigacion;
    }

    public void setAprobacionEticaDoc(UploadedFile aprobacionEticaDoc) {
        this.aprobacionEticaDoc = aprobacionEticaDoc;
    }

    public void setGrupoInvestigacion(GrupoInvestigacion grupoInvestigacion) {
        this.grupoInvestigacion = grupoInvestigacion;
    }

    public void setGruposInvestigacion(List<GrupoInvestigacion> gruposInvestigacion) {
        this.gruposInvestigacion = gruposInvestigacion;
    }

    public void setProyectosInvestigacion(List<ProyectoInvestigacion> proyectosInvestigacion) {
        this.proyectosInvestigacion = proyectosInvestigacion;
    }

    public void setTiposProyecto(List<TipoProyecto> tiposProyecto) {
        this.tiposProyecto = tiposProyecto;
    }

    public void setLineaInvestigacion(LineaInvestigacion lineaInvestigacion) {
        this.lineaInvestigacion = lineaInvestigacion;
    }

    public ProyectoInvestigacion getProyecto() {
        return proyecto;
    }

    public void setProyecto(ProyectoInvestigacion proyecto) {
        this.proyecto = proyecto;
    }

    public ProyectoInvestigacion getProyectoNuevo() {
        return proyectoNuevo;
    }

    public void setProyectoNuevo(ProyectoInvestigacion proyectoNuevo) {
        this.proyectoNuevo = proyectoNuevo;
    }

    /**
     * @return the investigadorEquipo
     */
    public Investigador getInvestigadorEquipo()
    {
        return investigadorEquipo;
    }

    /**
     * @param investigadorEquipo the investigadorEquipo to set
     */
    public void setInvestigadorEquipo(Investigador investigadorEquipo)
    {
        this.investigadorEquipo = investigadorEquipo;
    }

    /**
     * @return the investigadores
     */
    public List<Investigador> getInvestigadores()
    {
        return investigadores;
    }

    /**
     * @param investigadores the investigadores to set
     */
    public void setInvestigadores(List<Investigador> investigadores)
    {
        this.investigadores = investigadores;
    }

    /**
     * @return the rolesProyecto
     */
    public List<RolProyecto> getRolesProyecto()
    {
        return rolesProyecto;
    }

    /**
     * @param rolesProyecto the rolesProyecto to set
     */
    public void setRolesProyecto(List<RolProyecto> rolesProyecto)
    {
        this.rolesProyecto = rolesProyecto;
    }

    /**
     * @return the rolInvestigador
     */
    public RolProyecto getRolInvestigador()
    {
        return rolInvestigador;
    }

    /**
     * @param rolInvestigador the rolInvestigador to set
     */
    public void setRolInvestigador(RolProyecto rolInvestigador)
    {
        this.rolInvestigador = rolInvestigador;
    }

    /**
     * @return the modalidadesInvestigadores
     */
    public List<Modalidad> getModalidadesInvestigadores()
    {
        return modalidadesInvestigadores;
    }

    /**
     * @param modalidadesInvestigadores the modalidadesInvestigadores to set
     */
    public void setModalidadesInvestigadores(List<Modalidad> modalidadesInvestigadores)
    {
        this.modalidadesInvestigadores = modalidadesInvestigadores;
    }

    /**
     * @return the modalidadInvestigador
     */
    public Modalidad getModalidadInvestigador()
    {
        return modalidadInvestigador;
    }

    /**
     * @param modalidadInvestigador the modalidadInvestigador to set
     */
    public void setModalidadInvestigador(Modalidad modalidadInvestigador)
    {
        this.modalidadInvestigador = modalidadInvestigador;
    }

    public List<InvestigadorEquipo> getEquipoInvestigadores()
    {
        return equipoInvestigadores;
    }

    public void setEquipoInvestigadores(List<InvestigadorEquipo> equipoInvestigadores)
    {
        this.equipoInvestigadores = equipoInvestigadores;
    }

    public GrupoInvestigacionSB getGrupoInvestigacionSB()
    {
        return grupoInvestigacionSB;
    }

    public void setGrupoInvestigacionSB(GrupoInvestigacionSB grupoInvestigacionSB)
    {
        this.grupoInvestigacionSB = grupoInvestigacionSB;
    }

    public ProyectosSB getProyectoSB()
    {
        return proyectoSB;
    }

    public void setProyectoSB(ProyectosSB proyectoSB)
    {
        this.proyectoSB = proyectoSB;
    }

    public AuthAutNB getAuthAutNB()
    {
        return authAutNB;
    }

    public void setAuthAutNB(AuthAutNB authAutNB)
    {
        this.authAutNB = authAutNB;
    }

    /**
     * @return the codigoProyecto
     */
    public int getCodigoProyecto()
    {
        return codigoProyecto;
    }

    /**
     * @param codigoProyecto the codigoProyecto to set
     */
    public void setCodigoProyecto(int codigoProyecto)
    {
        this.codigoProyecto = codigoProyecto;
    }

    /**
     * @return the presupuestoEsperado
     */
    public Long getPresupuestoEsperado() {
        return presupuestoEsperado;
    }

    /**
     * @param presupuestoEsperado the presupuestoEsperado to set
     */
    public void setPresupuestoEsperado(Long presupuestoEsperado) {
        this.presupuestoEsperado = presupuestoEsperado;
    }

}
